name: 'PCB Release Action'
description: 'Run pcb release for provided paths inside the official KiCad container.'
author: 'Diode Inc.'

inputs:
  paths:
    description: 'List of paths (dirs or .zen files), comma or newline separated'
    required: true

outputs:
  artifact-dir:
    description: 'Directory containing collected release archives'
  artifact-files:
    description: 'Newline-separated list of collected archives (relative paths)'

runs:
  using: 'docker'
  image: 'docker://kicad/kicad:9.0-full'
  entrypoint: /bin/bash
  args:
    - -lc
    - |
      set -euo pipefail
      apt-get update -y
      apt-get install -y --no-install-recommends curl ca-certificates jq
      curl --proto '=https' --tlsv1.2 -LsSf https://github.com/diodeinc/pcb/releases/latest/download/pcb-installer.sh | sh
      export PATH="$HOME/.local/bin:$HOME/.cargo/bin:$PATH"

      mkdir -p artifacts
      # Normalize input to newline-separated list
      normalized=$(printf "%s" "${{ inputs.paths }}" | tr ',' '\n' | sed '/^\s*$/d' | sed 's/^\s*//;s/\s*$//')
      printf "%s\n" "$normalized" > paths.txt
      echo "Paths:"; cat paths.txt

      while IFS= read -r p; do
        echo "Processing: $p"
        if [[ -d "$p" ]]; then
          pushd "$p" >/dev/null
          shopt -s nullglob
          zens=( *.zen )
          if [[ ${#zens[@]} -ne 1 ]]; then
            echo "Expected exactly one .zen file in $p, found ${#zens[@]} — skipping"
            popd >/dev/null
            continue
          fi
          target="${zens[0]}"
        else
          target="$p"
        fi
        if [[ ! -f "$target" ]]; then
          echo "Target not found: $target — skipping"
          [[ -d "$p" ]] && popd >/devnull || true
          continue
        fi
        json_out=$(pcb release -f json "$target")
        echo "$json_out"
        archive=$(jq -r '.archive' <<< "$json_out")
        version=$(jq -r '.version' <<< "$json_out")
        if [[ -z "$archive" || ! -f "$archive" ]]; then
          echo "Release did not produce an archive for $p"
          [[ -d "$p" ]] && popd >/dev/null || true
          continue
        fi
        base_name=$(basename "${target%.zen}")
        dest="artifacts/${base_name}-${version}.zip"
        cp "$archive" "$dest"
        echo "Collected artifact: $dest"
        [[ -d "$p" ]] && popd >/dev/null || true
      done < paths.txt

      files=$(ls -1 artifacts 2>/dev/null | sed 's#^#artifacts/#' || true)
      {
        echo "artifact-dir=artifacts"
        printf "artifact-files<<EOF\n%s\nEOF\n" "$files"
      } >> "$GITHUB_OUTPUT"
